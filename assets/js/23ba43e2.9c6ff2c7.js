"use strict";(self.webpackChunkcipp_docs=self.webpackChunkcipp_docs||[]).push([[9908],{3905:function(e,t,n){n.d(t,{Zo:function(){return p},kt:function(){return d}});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var l=r.createContext({}),c=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=c(e.components);return r.createElement(l.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},h=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),h=c(n),d=o,m=h["".concat(l,".").concat(d)]||h[d]||u[d]||a;return n?r.createElement(m,i(i({ref:t},p),{},{components:n})):r.createElement(m,i({ref:t},p))}));function d(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,i=new Array(a);i[0]=h;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:o,i[1]=s;for(var c=2;c<a;c++)i[c]=n[c];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}h.displayName="MDXCreateElement"},2102:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return s},contentTitle:function(){return l},metadata:function(){return c},toc:function(){return p},default:function(){return h}});var r=n(7462),o=n(3366),a=(n(7294),n(3905)),i=["components"],s={},l="Troubleshooting",c={type:"mdx",permalink:"/troubleshooting/",source:"@site/src/pages/troubleshooting/index.md",title:"Troubleshooting",description:"Below are some common issues that users have had from initial deployment, updating and general usage.",frontMatter:{}},p=[{value:"Token Testing Script",id:"token-testing-script",children:[],level:2},{value:"Refresh Secure Application  Model Tokens",id:"refresh-secure-application--model-tokens",children:[],level:2},{value:"Clear Token Cache",id:"clear-token-cache",children:[],level:2},{value:"Service Principal",id:"service-principal",children:[],level:2},{value:"Multi-Factor Authentication Troubleshooting",id:"multi-factor-authentication-troubleshooting",children:[],level:2}],u={toc:p};function h(e){var t=e.components,n=(0,o.Z)(e,i);return(0,a.kt)("wrapper",(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"troubleshooting"},"Troubleshooting"),(0,a.kt)("p",null,"Below are some common issues that users have had from initial deployment, updating and general usage."),(0,a.kt)("p",null,"Note that these steps come from the community - if you notice any mistakes, please either edit this page or get in touch via the ",(0,a.kt)("a",{parentName:"p",href:"https://discord.gg/Cyberdrain"},"Discord server"),".  Please note the ",(0,a.kt)("a",{parentName:"p",href:"/docs/dev/#contributor-code-of-conduct"},"Contributor Code of Conduct"),"."),(0,a.kt)("h2",{id:"token-testing-script"},"Token Testing Script"),(0,a.kt)("details",null,(0,a.kt)("summary",null,"Token Test Script"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-powershell",metastring:'title="Test-SecureApplicationModelTokens.ps1"',title:'"Test-SecureApplicationModelTokens.ps1"'},'### User Input Variables ###\n\n### Enter the details of your Secure Access Model Application below ###\n$ApplicationId           = \'<YOUR APPLICATION ID>\'\n$ApplicationSecret       = \'<YOUR APPLICATION SECRET>\' | ConvertTo-SecureString -AsPlainText -Force\n$MyTenant                = \'<YOUR TENANT ID / DOMAIN>\'\n$RefreshToken            = \'<YOUR REFRESH TOKEN>\'\n$ExchangeRefreshToken    = \'<YOUR EXCHANGE REFRESH TOKEN>\'\n\n### Stop editing here ###\n\nfunction Get-GraphToken($TenantId, $scope, $AsApp, $ApplicationId, $eRefreshToken, $ReturnRefresh) {\n    if (!$scope) { $scope = \'https://graph.microsoft.com/.default\' }\n\n    $AuthBody = @{\n        client_id     = $ApplicationId\n        client_secret = $ApplicationSecret\n        scope         = $Scope\n        refresh_token = $eRefreshToken\n        grant_type    = "refresh_token"\n                    \n    }\n\n    if ($null -ne $AppID -and $null -ne $eRefreshToken) {\n        $AuthBody = @{\n            client_id     = $ApplicationId\n            refresh_token = $eRefreshToken\n            scope         = $Scope\n            grant_type    = "refresh_token"\n        }\n    }\n\n    if (!$TenantId) { $TenantId = $env:tenantid }\n    $AccessToken = (Invoke-RestMethod -Method post -Uri "https://login.microsoftonline.com/$($TenantId)/oauth2/v2.0/token" -Body $Authbody -ErrorAction Stop)\n    if ($ReturnRefresh) { $header = $AccessToken } else { $header = @{ Authorization = "Bearer $($AccessToken.access_token)" } }\n\n    return $header\n}\nfunction Connect-GraphAPI {\n    [CmdletBinding()]\n    Param\n    (\n        [parameter(Position = 0, Mandatory = $false)]\n        [ValidateNotNullOrEmpty()][String]$ApplicationId,\n        \n        [parameter(Position = 1, Mandatory = $false)]\n        [ValidateNotNullOrEmpty()][String]$ApplicationSecret,\n        \n        [parameter(Position = 2, Mandatory = $true)]\n        [ValidateNotNullOrEmpty()][String]$TenantID,\n\n        [parameter(Position = 3, Mandatory = $false)]\n        [ValidateNotNullOrEmpty()][String]$RefreshToken\n\n    )\n    Write-Verbose "Removing old token if it exists"\n    $Script:GraphHeader = $null\n    Write-Verbose "Logging into Graph API"\n    try {\n        if ($ApplicationId) {\n            Write-Verbose "   using the entered credentials"\n            $script:ApplicationId = $ApplicationId\n            $script:ApplicationSecret = $ApplicationSecret\n            $script:RefreshToken = $RefreshToken\n            $AuthBody = @{\n                client_id     = $ApplicationId\n                client_secret = $ApplicationSecret\n                scope         = \'https://graph.microsoft.com/.default\'\n                refresh_token = $RefreshToken\n                grant_type    = "refresh_token"\n                \n            }\n            \n        }\n        else {\n            Write-Verbose "   using the cached credentials"\n            $AuthBody = @{\n                client_id     = $script:ApplicationId\n                client_secret = $Script:ApplicationSecret\n                scope         = \'https://graph.microsoft.com/.default\'\n                refresh_token = $script:RefreshToken\n                grant_type    = "refresh_token"\n                \n            }\n        }\n        $AccessToken = (Invoke-RestMethod -Method post -Uri "https://login.microsoftonline.com/$($tenantid)/oauth2/v2.0/token" -Body $Authbody -ErrorAction Stop).access_token\n\n        $Script:GraphHeader = @{ Authorization = "Bearer $($AccessToken)" }\n    }\n    catch {\n        Write-Host "Could not log into the Graph API for tenant $($TenantID): $($_.Exception.Message)" -ForegroundColor Red\n    }\n\n}\n\nWrite-Host "Starting test of the standard Refresh Token" -ForegroundColor Green\n\ntry {\n    Write-Host "Attempting to retrieve an Access Token" -ForegroundColor Green\n    Connect-GraphAPI -ApplicationId $ApplicationId -ApplicationSecret $ApplicationSecret -RefreshToken $RefreshToken -TenantID $MyTenant\n}\ncatch {\n    $ErrorDetails = if ($_.ErrorDetails.Message) {\n        $ErrorParts = $_.ErrorDetails.Message | ConvertFrom-Json\n        "[$($ErrorParts.error)] $($ErrorParts.error_description)"\n    }\n    else {\n        $_.Exception.Message\n    }\n    Write-Host "Unable to generate access token. The detailed error information, if returned was: $($ErrorDetails)" -ForegroundColor Red\n}\n\ntry {\n    Write-Host "Attempting to retrieve all tenants you have delegated permission to" -ForegroundColor Green\n    $Tenants = (Invoke-RestMethod -Uri "https://graph.microsoft.com/v1.0/contracts?`$top=999" -Method GET -Headers $script:GraphHeader).value\n}\ncatch {\n    $ErrorDetails = if ($_.ErrorDetails.Message) {\n        $ErrorParts = $_.ErrorDetails.Message | ConvertFrom-Json\n        "[$($ErrorParts.error)] $($ErrorParts.error_description)"\n    }\n    else {\n        $_.Exception.Message\n    }\n    Write-Host "Unable to retrieve tenants. The detailed error information, if returned was: $($ErrorDetails)" -ForegroundColor Red\n}\n\n# Setup some variables for use in the foreach. Pay no attention to the man behind the curtain....\n$TenantCount = $Tenants.Count\n$IncrementAmount = 100 / $TenantCount\n$i = 0\n$ErrorCount = 0\n\nWrite-Host "$TenantCount tenants found, attempting to loop through each to test access to each individual tenant" -ForegroundColor Green\n# Loop through every tenant we have, and attempt to interact with it with Graph\nforeach ($Tenant in $Tenants) {\n    Write-Progress -Activity "Checking Tenant - Refresh Token" -Status "Progress -> Checking $($Tenant.defaultDomainName)" -PercentComplete $i -CurrentOperation TenantLoop\n    If ($i -eq 0) { Write-Host "Starting Refresh Token Loop Tests" }\n    $i = $i + $IncrementAmount\n\n    try {\n        Connect-GraphAPI -ApplicationId $ApplicationId -ApplicationSecret $ApplicationSecret -RefreshToken $RefreshToken -TenantID $Tenant.customerId\n    }\n    catch {\n        $ErrorDetails = if ($_.ErrorDetails.Message) {\n            $ErrorParts = $_.ErrorDetails.Message | ConvertFrom-Json\n            "[$($ErrorParts.error)] $($ErrorParts.error_description)"\n        }\n        else {\n            $_.Exception.Message\n        }\n        Write-Host "Unable to connect to graph API for $($Tenant.defaultDomainName). The detailed error information, if returned was: $($ErrorDetails)" -ForegroundColor Red\n        $ErrorCount++\n        continue\n    }\n\n\n    try {\n        $Result = (Invoke-RestMethod -Uri "https://graph.microsoft.com/v1.0/users" -Method GET -Headers $script:GraphHeader).value\n    }\n    catch {\n        $ErrorDetails = if ($_.ErrorDetails.Message) {\n            $ErrorParts = $_.ErrorDetails.Message | ConvertFrom-Json\n            "[$($ErrorParts.error)] $($ErrorParts.error_description)"\n        }\n        else {\n            $_.Exception.Message\n        }\n        Write-Host "Unable to get users from $($Tenant.defaultDomainName) in Refresh Token Test. The detailed error information, if returned was: $($ErrorDetails)" -ForegroundColor Red\n        $ErrorCount++\n    }\n    \n}\n\nWrite-Host "Standard Graph Refresh Token Test: $TenantCount total tenants, with $ErrorCount failures"\nWrite-Host "Now attempting to test the Exchange Refresh Token"\n\n# Setup some variables for use in the foreach. Pay no attention to the man behind the curtain....\n$j = 0\n$ExcErrorCount = 0\n\nforeach ($Tenant in $Tenants) {\n    Write-Progress -Activity "Checking Tenant - Exchange Refresh Token" -Status "Progress -> Checking $($Tenant.defaultDomainName)" -PercentComplete $j -CurrentOperation TenantLoop\n    If ($j -eq 0) { Write-Host "Starting Exchange Refresh Token Test" }\n    $j = $j + $IncrementAmount\n\n    try {\n        $upn = "notRequired@required.com"\n        $tokenvalue = ConvertTo-SecureString (Get-GraphToken -AppID \'a0c73c16-a7e3-4564-9a95-2bdf47383716\' -ERefreshToken $ExchangeRefreshToken -Scope \'https://outlook.office365.com/.default\' -Tenantid $Tenant.defaultDomainName).Authorization -AsPlainText -Force\n        $credential = New-Object System.Management.Automation.PSCredential($upn, $tokenValue)\n        $session = New-PSSession -ConfigurationName Microsoft.Exchange -ConnectionUri "https://ps.outlook.com/powershell-liveid?DelegatedOrg=$($tenant.defaultDomainName)&BasicAuthToOAuthConversion=true" -Credential $credential -Authentication Basic -AllowRedirection -ErrorAction Continue\n        $session = Import-PSSession $session -ea Silentlycontinue -AllowClobber -CommandName "Get-OrganizationConfig"\n        $org = Get-OrganizationConfig\n        $null = Get-PSSession | Remove-PSSession\n    }\n    catch {\n        $ErrorDetails = if ($_.ErrorDetails.Message) {\n            $ErrorParts = $_.ErrorDetails.Message | ConvertFrom-Json\n            "[$($ErrorParts.error)] $($ErrorParts.error_description)"\n        }\n        else {\n            $_.Exception.Message\n        }\n        Write-Host "Tenant: $($Tenant.defaultDomainName)-----------------------------------------------------------------------------------------------------------" -ForegroundColor Yellow\n        Write-Host "Failed to Connect to Exchange for $($Tenant.defaultDomainName). The detailed error information, if returned was: $($ErrorDetails)" -ForegroundColor Red        \n        $ExcErrorCount++\n    }\n}\n\nWrite-Host "Exchange Refresh Token Test: $TenantCount total tenants, with $ExcErrorCount failures"\nWrite-Host "All Tests Finished"\n'))),(0,a.kt)("p",null,"This script comes from Gavin Stone's ",(0,a.kt)("a",{parentName:"p",href:"https://www.gavsto.com/secure-application-model-for-the-layman-and-step-by-step/"},"excellent blog post on setting up the Secure Application Model"),"."),(0,a.kt)("p",null,"This script doesn't test the CIPP configuration, only that the tokens you are pasting into this script are correct.  "),(0,a.kt)("p",null,"It's possible that you may have pasted the tokens incorrectly into the deployment fields."),(0,a.kt)("h2",{id:"refresh-secure-application--model-tokens"},"Refresh Secure Application  Model Tokens"),(0,a.kt)("details",null,(0,a.kt)("summary",null,"Refresh Token Script"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-powershell",metastring:'title="Update-SecureApplicationModelTokens.ps1"',title:'"Update-SecureApplicationModelTokens.ps1"'},'### User Input Variables ###\n\n### Enter the details of your Secure Access Model Application below ###\n\n$ApplicationId           = \'<YOUR APPLICATION ID>\'\n$ApplicationSecret       = \'<YOUR APPLICATION SECRET>\' | ConvertTo-SecureString -AsPlainText -Force\n$TenantID                = \'<YOUR TENANT ID>\'\n\n### Create credential object using UserEntered(ApplicationID) and UserEntered(ApplicationSecret) ###\n\n$Credential = New-Object System.Management.Automation.PSCredential($ApplicationId, $ApplicationSecret)\n\n### Splat Params required for Updating Refresh Token ###\n\n$UpdateRefreshTokenParamaters = @{\n    ApplicationID        = $ApplicationId\n    Tenant               = $TenantID\n    Scopes               = \'https://api.partnercenter.microsoft.com/user_impersonation\'\n    Credential           = $Credential\n    UseAuthorizationCode = $true\n    ServicePrincipal     = $true\n}\n\n### Splat Params required for Updating Exchange Refresh Token ###\n\n$UpdateExchangeTokenParamaters = @{\n    ApplicationID           = \'a0c73c16-a7e3-4564-9a95-2bdf47383716\'\n    Scopes                  = \'https://outlook.office365.com/.default\'\n    Tenant                  = $TenantID\n    UseDeviceAuthentication = $true\n}\n\n### Create new Refresh Token using previously splatted paramaters ###\n\n$Token = New-PartnerAccessToken @UpdateRefreshTokenParamaters\n\n### Create new Exchange Refresh Token using previously splatted paramaters ###\n\n$Exchangetoken = New-PartnerAccessToken @UpdateExchangeTokenParamaters \n\n### Output Refresh Tokens and Exchange Refresh Tokens ###\n\nWrite-Host "================ Secrets ================"\nWrite-Host "`$ApplicationId         = $($ApplicationId)"\nWrite-Host "`$ApplicationSecret     = $($ApplicationSecret)"\nWrite-Host "`$TenantID              = $($TenantID)"\nWrite-Host "`$RefreshToken          = $($Token.refreshtoken)" -ForegroundColor Blue\nWrite-Host "`$ExchangeRefreshToken  = $($ExchangeToken.Refreshtoken)" -ForegroundColor Green\nWrite-Host "================ Secrets ================"\nWrite-Host "     SAVE THESE IN A SECURE LOCATION     "\n'))),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"Go to Settings"),(0,a.kt)("li",{parentName:"ol"},"Select ",(0,a.kt)("strong",{parentName:"li"},"Backend")),(0,a.kt)("li",{parentName:"ol"},"Select ",(0,a.kt)("strong",{parentName:"li"},"Go to Key Vault")),(0,a.kt)("li",{parentName:"ol"},"Select ",(0,a.kt)("strong",{parentName:"li"},"Access Policies")),(0,a.kt)("li",{parentName:"ol"},"Select ",(0,a.kt)("strong",{parentName:"li"},"Add Access Policy")),(0,a.kt)("li",{parentName:"ol"},'Add your own user with "Secret Management" permissions.'),(0,a.kt)("li",{parentName:"ol"},"Go back to Secrets."),(0,a.kt)("li",{parentName:"ol"},"Update the tokens as required by creating new versions."),(0,a.kt)("li",{parentName:"ol"},"Clear the ",(0,a.kt)("a",{parentName:"li",href:"#clear-token-cache"},"token cache"),".")),(0,a.kt)("h2",{id:"clear-token-cache"},"Clear Token Cache"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"Go to Settings"),(0,a.kt)("li",{parentName:"ol"},"Select ",(0,a.kt)("strong",{parentName:"li"},"Backend")),(0,a.kt)("li",{parentName:"ol"},"Select ",(0,a.kt)("strong",{parentName:"li"},"Go to Function App Configuration")),(0,a.kt)("li",{parentName:"ol"},"At each item that has the source ",(0,a.kt)("em",{parentName:"li"},"Key Vault")," there should be a green checkbox. If there is no green checkbox, restart the function app and try in 30 minutes"),(0,a.kt)("li",{parentName:"ol"},"For the items ",(0,a.kt)("em",{parentName:"li"},"RefreshToken")," and ",(0,a.kt)("em",{parentName:"li"},"ExchangeRefreshToken")," rename each item, for example to ",(0,a.kt)("em",{parentName:"li"},"RefreshToken2")),(0,a.kt)("li",{parentName:"ol"},"Select ",(0,a.kt)("strong",{parentName:"li"},"Save")),(0,a.kt)("li",{parentName:"ol"},"Select ",(0,a.kt)("strong",{parentName:"li"},"Overview")," in the side menu"),(0,a.kt)("li",{parentName:"ol"},"Stop the app & wait 5 minutes."),(0,a.kt)("li",{parentName:"ol"},"Start the app"),(0,a.kt)("li",{parentName:"ol"},"Go back to ",(0,a.kt)("strong",{parentName:"li"},"Configuration")," in the side menu."),(0,a.kt)("li",{parentName:"ol"},"Reset the token names to their original values, for example back to ",(0,a.kt)("em",{parentName:"li"},"RefreshToken")),(0,a.kt)("li",{parentName:"ol"},"Stop the app once more for 5 minutes then start it again.")),(0,a.kt)("p",null,"The tokens should no longer be in the cache."),(0,a.kt)("h2",{id:"service-principal"},"Service Principal"),(0,a.kt)("p",null,"Sometimes Azure has intermittent issues with applying service principals to AAD."),(0,a.kt)("p",null,"If this is the only error during deployment, follow the below steps:"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"Go to the ",(0,a.kt)("a",{parentName:"li",href:"https://portal.azure.com/#blade/Microsoft_Azure_Billing/SubscriptionsBlade"},"Subscription in the Azure Portal")),(0,a.kt)("li",{parentName:"ol"},"Select ",(0,a.kt)("strong",{parentName:"li"},"Access Control (IAM)")),(0,a.kt)("li",{parentName:"ol"},"Select ",(0,a.kt)("strong",{parentName:"li"},"Add")),(0,a.kt)("li",{parentName:"ol"},"Select ",(0,a.kt)("strong",{parentName:"li"},"Add Role Assignment")),(0,a.kt)("li",{parentName:"ol"},"Give the Azure function service principal ",(0,a.kt)("em",{parentName:"li"},"reader")," role")),(0,a.kt)("h2",{id:"multi-factor-authentication-troubleshooting"},"Multi-Factor Authentication Troubleshooting"),(0,a.kt)("p",null,"Here are a few things it's important to know about MFA and it's effects on the Secure Application Model (SAM) and CIPP:"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"The account you use to generate your SAM tokens for CIPP must have Microsoft (Azure AD) MFA enabled, it can't use third-party MFA."),(0,a.kt)("li",{parentName:"ol"},"You can't have the ",(0,a.kt)("inlineCode",{parentName:"li"},"Allow users to remember multi-factor authentication on devices they trust")," option enabled in the ",(0,a.kt)("a",{parentName:"li",href:"https://account.activedirectory.windowsazure.com/UserManagement/MfaSettings.aspx"},"classic MFA admin portal"),". In either customer or the partner tenant."),(0,a.kt)("li",{parentName:"ol"},"You can't have trusted locations or other Conditional Access Policy settings applicable to the account you use to generate your SAM tokens for CIPP.")))}h.isMDXComponent=!0}}]);